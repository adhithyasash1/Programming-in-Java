/*
Object is the supreme universal class in Java, that is how java is designed to function

every class we create in java, has these predefined methods of 
this universal super class object

Hence, we can use these predefined methods on all of the classes
and objects we create

Useful methods defined in Object class : 
	-> public boolean equals(Object o) // defaults to pointer equality
	-> public String toString() // converts the values of the instance variables to String
	
For Java objects x and y, x == y invokes x.equals(y)
To print o, use System.out.println(o+""); Implicitly invokes o.toString()


Can exploit this tree structure to write generic functions,
Example: search for an element in an array
*/

public int find (Object[] objarr, Object o){
	int i;
	for (i = 0; i < objarr.length(); i++){
		if (objarr[i] == o) {return i}; // Recall that == is pointer equality, by default
	}
	return (-1);
}

/*
May wish to override equals() to
compare the object state, as follows
*/

public boolean equals(Date d){
	return ((this.day == d.day) &&
			(this.month == d.month) &&
			(this.year == d.year));
}

/*
Unfortunately, boolean equals(Date d) does not override boolean equals(Object o)!

Remember in order to over-ride a method, we need to have the same signatures,
Date d and Object o are different signatures

to get around this, we use
*/

public boolean equals(Object d){
	if (d instanceof Date){ 
		Date myd = (Date) d; // type cast the object into instance of whatever we want to compare and return boolean
		return ((this.day == myd.day) &&
		(this.month == myd.month) &&
		(this.year == myd.year));
	}
	return(false);
}
